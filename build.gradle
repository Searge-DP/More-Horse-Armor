buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name = "Epoxide"
        url = "http://maven.cubedlc.com"
    }
}

apply plugin: 'forge'
project.ext.mcVersion = "1.7.10"

version = getVersionFromJava(file("src/main/java/net/epoxide/mha/util/Constants.java"))
group = "net.epoxide.mha"
archivesBaseName = "MoreHorseArmor"

minecraft {
    version = "1.7.10-10.13.4.1517-1.7.10"
    runDir = "eclipse"
}

dependencies {
    compile "net.darkhax.bookshelf:Bookshelf:1.7.10-1.1.0.41:deobf"
}

String getVersionFromJava(File file) {
    String projNumber = "0";
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String VERSION = \"";
    file.eachLine { String s ->

        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            projNumber = pts[0];
            major = pts[1];
            revision = pts[2];
        }
    }

    if (System.getenv().containsKey("BUILD_NUMBER")) {
        patch = System.getenv("BUILD_NUMBER");
    }

    return "1.7.10-$projNumber.$major.$revision.$patch";
}

task writeBuildNumber << {
    def file = file("src/main/java/net/darkhax/bookshelf/util/Constants.java");
    def bn = System.getenv("BUILD_NUMBER") ?: 0;
    def outfile = "";
    def ln = System.getProperty("line.separator")

    file.eachLine { String s ->
        if (s.contains("PATCH_VERSION") && s.contains("= \"0\"")) {
            s = "    public static final String PATCH_VERSION = \"${bn}\";";
        }
        outfile += (s + ln);
    }

    file.write(outfile);
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {

    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {

    archives deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///var/www/html/maven")
        }
    }
}